<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.suyang.mapper.StudentMapper" >
  <sql id="Base_Column_List" >
    id, name, age, birthday
  </sql>
  <resultMap id="BaseResultMap" type="com.suyang.domain.Student" >
    <id property="id" column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    <result property="name" column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
    <result property="age" column="age" javaType="java.lang.Integer" jdbcType="INTEGER" />
    <result property="birthday" column="birthday" javaType="java.util.Date" jdbcType="TIMESTAMP" />
  </resultMap>
  <select id="count" resultType="java.lang.Integer" >
    select count(*) from tb_student
  </select>
  <update id="update" parameterType="com.suyang.domain.Student" >
    update tb_student set name=#{name}, age=#{age}, birthday=#{birthday} where id=#{id}
  </update>
  <delete id="delete" parameterType="java.lang.Integer" >
    delete from tb_student where id=#{id}
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.suyang.domain.Student" useGeneratedKeys="true" >
    insert into tb_student (id, name, age, birthday) value(#{id}, #{name}, #{age}, #{birthday})
  </insert>
  <insert id="insertCollection" keyProperty="id" parameterType="java.util.List" useGeneratedKeys="true" >
    insert into tb_student (id, name, age, birthday) values
    <foreach collection="list" item="item" index="index" separator="," >
      (#{item.id}, #{item.name}, #{item.age}, #{item.birthday})
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyProperty="id" parameterType="com.suyang.domain.Student" useGeneratedKeys="true" >
    insert into tb_student (id, name, age, birthday) values(#{id}, #{name}, #{age}, #{birthday}) on duplicate key update name=#{name}, age=#{age}, birthday=#{birthday}
  </insert>
  <insert id="insertOrUpdateCollection" keyProperty="id" parameterType="java.util.List" useGeneratedKeys="true" >
    insert into tb_student (id, name, age, birthday) values
    <foreach collection="list" item="item" index="index" separator="," >
      (#{item.id}, #{item.name}, #{item.age}, #{item.birthday})
    </foreach>
    on duplicate key update id=values(id), name=values(name), age=values(age), birthday=values(birthday)
  </insert>
  <delete id="deleteAll" >
    delete from tb_student
  </delete>
  <select id="findByWhere" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student
    <if test="where != null and where != ''" >
      where ${where}
    </if>
  </select>
  <select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
     from tb_student where id=#{id}
  </select>
  <select id="findAll" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student
  </select>
  <delete id="deletes" parameterType="java.util.List" >
    delete from tb_student where id in
    <foreach collection="list" item="item" open="(" separator="," close=")" >
      #{item}
    </foreach>
  </delete>
  <select id="findByWhere" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student
    <if test="where != null and where != ''" >
      where ${where}
    </if>
    <if test="order != null and order !=''" >
      order by ${order}
    </if>
  </select>
  <select id="findByWhere" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student limit #{offset}, #{limit}
  </select>
  <select id="findByWhere" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student
    <if test="where != null and where != ''" >
      where ${where}
    </if>
    limit #{offset}, #{limit}
  </select>
  <select id="findByWhere" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
     from tb_student
    <if test="where != null and where != ''" >
      where ${where}
    </if>
    <if test="order != null and order !=''" >
      order by ${order}
    </if>
    limit #{offset}, #{limit}
  </select>
  <select id="count" resultType="java.lang.Integer" >
    select count(*) from tb_student
    <if test="where != null and where != ''" >
      where ${where}
    </if>
  </select>
</mapper>